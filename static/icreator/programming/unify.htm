<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<TITLE>унификация значений ПроЛога, простая экспертная система</TITLE>
</HEAD>
<BODY>

<B><FONT FACE="Courier New" SIZE=2><P>Унификация значений ПроЛога с примером простой экспертной системой на ПроЛоге</P>
</B><P>Автор Ермолаев Дмитрий Сергеевич </FONT><A HREF="http://www.icreator.ru/"><U><FONT FACE="Courier New" SIZE=2 COLOR="#0000ff">www.icreator.ru</U></FONT></A></P>
<FONT FACE="Courier New">Пример написания программы Простая Экспертная Система на языке ПроЛог. Начнем с того, что знак равно в ПроЛоге используется не как оператор приравнивания, а как оператор унифицирования. Унификация – это приведение выражений справа и слева от знака унификации к одному значению. При этом несвязанные значения из одного выражения будут заполнены значениями из другого выражения. Таким образом, если в операции унификации участвуют две переменных, и каждая связана со своим значением, то выполняется их сравнение. Если одна переменная не связана, то выполняется приравнивание ей значения. А если в унификации участвуют выражения с наличием несвязанных частей, то эти части принимают значения из таких же частей другого выражения. При этом ПроЛог пытается привести оба выражения к одному значению. Примеры.
</FONT><B><FONT FACE="Courier New" SIZE=2><P>Унификация как приравнивание.</P>
</B></FONT>
<a href="https://upbit.org/?ref=1059"><img src="https://upbit.org/assets/partner/banner-img/648_60_upbit.gif"></a><br>

<I><FONT COLOR="#0000ff"><PRE>Goal
</FONT><FONT FACE="Courier New">&#9;А = 5,
&#9;А = Б
&#9;write(А, “,”, Б).</PRE>
</I></FONT><FONT FACE="Courier New" SIZE=2><P>Здесь в первой строчке унификация несвязанной переменной со значением 5. Результат – значение переменной А связано с константой 5. Во второй строчке унификация несвязанной переменной В и связанной А приведет к передаче значения переменной А в переменную Б. ПроЛог выдаст на экран:</P>
</FONT><FONT FACE="Courier New" SIZE=2><P>5,5</P>
</FONT><B><FONT FACE="Courier New" SIZE=2><P>Унификация как сравнение</P>
</B></FONT><I><FONT COLOR="#0000ff"><PRE>Goal
</FONT><FONT FACE="Courier New">&#9;А = 5,
&#9;Б = “да”,
&#9;А = Б.</PRE>
</I></FONT><FONT FACE="Courier New" SIZE=2><P>Здесь уже в унификации будут участвовать два полностью связанных значения, значит происходит простое сравнение значений. Результат выполнения ПроЛога:</P>
</FONT><FONT FACE="Courier New" SIZE=2><P>No</P>
</FONT><FONT FACE="Courier New" SIZE=2><P>Это говорит что унификация не успешна, то есть значения переменной А и Б неравны.</P>
<B><P>Унификация как приведение к одному значению</P>
</B></FONT><FONT FACE="Courier New">Теперь посмотрим что будет, если в переменных будут только некоторые части значений несвязанны. Для это хорошо подходит список значений. Если какой-либо элемент списка несвязан, то механизм унификации будет пытаться его связать используя значения из другого выражения.
</FONT><I><PRE><FONT COLOR="#0000ff">domains
</FONT><FONT FACE="Courier New">Слово = string
Слова = reference Слово*
</FONT><FONT COLOR="#0000ff">predicates
</FONT><FONT FACE="Courier New">унификация(Слова А, Слова Б)
</FONT><FONT COLOR="#0000ff">clauses
</FONT><FONT FACE="Courier New">унификация(Слова,Слова):-!.
</FONT>
<FONT COLOR="#0000ff">Goal
</FONT><FONT FACE="Courier New">&#9;А = [“да”, “нет”, С],
&#9;Б = [“да”,_, “точно”],
&#9;унификация ( А, Б),
&#9;write(А, “,”, Б, “:”, С).</PRE>
</I></FONT><FONT FACE="Courier New" SIZE=2><P>Здесь ПроЛог будет приводить оба значения к одному обобщенному значению, используя связанные значения из одного выражения для связи несвязанных значений в другом выражении. Результат выполнения ПроЛога:</P>
<P>[“да”, “нет”, “точно”], [“да”, “нет”, “точно”]: “точно”</P>
<P>Как видно унификация прошла успешно, что привело к одному значению для обоих выражений. Однако, если переменной А будет присвоено другое значение [“да”, “нет”,_,_], унификация будет неуспешна.</P>
<P>Нужно заметить, что для включения механизма унификации неполных значений нужно объявить явно, что значения переменной могут быть частично связаны (быть ссылками, а не значениями) с помощью ключевого слова </FONT><I><FONT FACE="Courier New" SIZE=2>reference</I></FONT><FONT FACE="Courier New" SIZE=2>. Это делается при объявлении типа значения в секции </FONT><I><FONT FACE="Courier New" SIZE=2>domains</I></FONT><FONT FACE="Courier New" SIZE=2> программы. Еще замечание. При появлении в программе ПроЛога константы “список элементов”, первый элемент должен быть связан со значением. Это нужно для того чтобы ПроЛог мог определить тип остальных элементов списка. В нашем примере в обоих константах “список элементов” первый элемент звязан со значением “да”. Если список передается как параметр вызова предиката, то это условие необязательно ввиду того что параметры предиката уже явно описаны и принадлежат к конкретному типу. Например, можно было бы написать предикат <I>унификация([_, “да”],С) </I>что не вызвало бы ошибку ПроЛога.</P>
<P>Еще интересная особенность ключевого слова reference – это то, что можно унифицировать еще несвязанные переменные. Тогда их ссылки на область значения будут одинаковые. И если в дальнейшем одну переменную связать со значением, то и вторая переменная будет автоматически связана. Пример с использованием предиката “унификация”, описанного выше.</P>
</FONT><I><FONT COLOR="#0000ff"><PRE>Goal
</FONT><FONT FACE="Courier New">&#9;Унификация ( А, Б),
&#9;А = [“да”, “нет”],
&#9;write(Б).</PRE>
</I></FONT><FONT FACE="Courier New" SIZE=2><P>Результат ПроЛога :</P>
<P>[“да”, “нет”]</P>
<P>Видно, что явно никакого значения переменной Б не присваивалось. Тем не менее в ней появилось значение.</P>
<B><P>Простая Экспертная Система на основе унификации значений ПроЛога.</P>
</B><P>Теперь Мы можем создать более сложный и интересный пример использования унификаций значений ПроЛога. Сделаем экспертную систему по знаниям о мире на языке, приближенном к естественному языку человека. Пусть каждое знание состоит только из одного предложения. Каждое слово предложения может быть разного типа: существительное, глагол, прилагательное,… Каждое слово имеет семантическую связь в другому слову. Объявление такого слова будет выглядеть так:</P>
</FONT><I><FONT COLOR="#0000ff"><PRE>Domains
</FONT><FONT FACE="Courier New">Слово = </FONT><FONT COLOR="#0000ff">string
</FONT><FONT FACE="Courier New">СловоПредл = </FONT><FONT COLOR="#0000ff">reference</FONT><FONT FACE="Courier New"> сущ(Слово,СловоПредл); 
&#9;глаг(Слово,СловоПредл); прил(Слово,СловоПредл);
&#9;пред(Слово,СловоПредл); нар(Слово,СловоПредл);
&#9;пусто</PRE>
</I></FONT><FONT FACE="Courier New" SIZE=2><P>Здесь “<I>пусто</I>” означает конец предложения. Как видно каждое слово предложения связано с другим словом предложения, так что бы смысл знания был выражен семантически с помощью этих связей.</P>
<P>Теперь опишем базу знаний и вид фактов в ней.</P>
</FONT><I><FONT COLOR="#0000ff"><PRE>database</FONT><FONT FACE="Courier New"> - знания
знание(СловоПредл)</PRE>
</I></FONT><FONT FACE="Courier New" SIZE=2><P>Используя унификацию значений ПроЛога Мы получаем наипростейший поиск знаний. Предикат поиска будет выглядеть так:</P>
</FONT><I><FONT COLOR="#0000ff"><PRE>predicates
nondeterm</FONT><FONT FACE="Courier New"> ответ(СловоПредл)
</FONT><FONT COLOR="#0000ff">
clauses
</FONT><FONT FACE="Courier New">ответ(СловоПредл):-
&#9;знание(СловоПредл).</PRE>
</I></FONT><FONT FACE="Courier New" SIZE=2><P>ВСЁ! Замечу, что можно обойтись и без предиката вовсе, задавая поиск фактов напрямую в базе знаний. Ключевое слово </FONT><I><FONT FACE="Courier New" SIZE=2 COLOR="#0000ff">nondeterm</I></FONT><FONT FACE="Courier New" SIZE=2> указывает на то что в случае отката нужно перебирать все возможные варианты ответов если таковые есть.</P>
<P>Теперь можно создать бузу знаний для экспертной системы и задавать вопросы. Пусть база знаний хранится в файле “знания.txt” и содержит факты:</P>
</FONT><FONT FACE="Courier New"><PRE>знание(сущ("лев",глаг("живёт",пред("в",сущ("саванне",пусто))))).
знание(сущ("антилопа",глаг("живёт",пред("в",сущ("саванне",пусто))))).
знание(сущ("зебра",глаг("живёт",пред("в",сущ("саванне",пусто))))).
знание(сущ("лев",глаг("охотится",пред("на",сущ("животных",пусто))))).
знание(сущ("тигр",глаг("охотится",пред("на",сущ("животных",пусто))))).
знание(сущ("тигр",глаг("живёт",пред("в",сущ("лесу",пусто))))).
знание(сущ("заяц",глаг("живёт",пред("в",сущ("лесу",пусто))))).
знание(сущ("заяц",глаг("ест",сущ("траву",пусто)))).
знание(сущ("олень",глаг("ест",сущ("траву",пусто)))).
знание(сущ("заяц",глаг("ест",сущ("кору",пусто)))).</PRE>
<P>Теперь можно задать вопрос экспертной системе, например, кто живёт в саванне. Это будет выглядеть следующим обращом:</P>
</FONT><I><PRE><FONT COLOR="#0000ff">
Goal</FONT>:-&#9;<FONT FACE="Courier New" COLOR="#008000">% вызов решателя ПроЛога
</FONT><FONT FACE="Courier New">&#9;consult("знания.txt",знания),&#9; </FONT><FONT FACE="Courier New" COLOR="#008000">% загрузка базы знаний
% определение слов вопроса
</FONT><FONT FACE="Courier New">&#9;ЧтоДелает="живёт", Где="саванне",
% сборка вопроса
&#9;А=сущ(Кто,глаг(ЧтоДелает,пред(Предл,сущ(Где,Дополнения)))),
% поиск ответов
&#9;ответ(А),
% печать ответов
&#9;nl,write(Кто, " ", ЧтоДелает, " ", Предл, " ", Где, " ", Дополнения),
</FONT>&#9;fail.
</PRE></I>
<P><FONT FACE="Courier New">Ответ Пролога:
</FONT></P>
<PRE><FONT FACE="Courier New">лев живёт в саванне пусто
антилопа живёт в саванне пусто
зебра живёт в саванне пусто</PRE>
<P>Если нам нужно узнать что делает лев, то нужно задать вместо слов запроса, сборки запроса и вывода на экран следующие строчки:</P>
<PRE><I>&#9;Кто="лев",
&#9;А=сущ(Кто,глаг(ЧтоДелает,Дополнения),
&#9;nl,write(Кто, " ", ЧтоДелает, " ", Дополнения),
</FONT>
</I></PRE>
<P><FONT FACE="Courier New">ответ ПроЛога будет:
</FONT></P>
<PRE><FONT FACE="Courier New">лев живёт пред("в",сущ("саванне",пусто))
лев охотится пред("на",сущ("животных",пусто))
</FONT></PRE>
<P><FONT FACE="Courier New">Конечно можно сделать автоматическую сборку вопроса и вывод найденных знаний без вывода внутренних типов слов знания, так чтобы полностью перейти на естественный язык общения с экспертной системой. Но это уже другая задача. Вообще на основе механизма унификации можно построить очень сильную и умную экспертную систему. При этом используя естественный язык как входной, так и выходной.
</FONT></P>

<P><A HREF="HTTP://icreator.ru/programming/"><U><FONT FACE="Times New Roman" COLOR="#0000ff">назад в раздел</U></FONT></A></P>
<P><A HREF="HTTP://www.icreator.ru/index.htm"><U><FONT FACE="Times New Roman" COLOR="#0000ff">на главную страницу</U></FONT></A> </P>
<!--Rating@Mail.ru COUNTER--><script language="JavaScript"><!--
d=document;a='';a+=';r='+escape(d.referrer)
js=10//--></script><script language="JavaScript1.1"><!--
a+=';j='+navigator.javaEnabled()
js=11//--></script><script language="JavaScript1.2"><!--
s=screen;a+=';s='+s.width+'*'+s.height
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth)
js=12//--></script><script language="JavaScript1.3"><!--
js=13//--></script><script language="JavaScript"><!--
d.write('<a href="http://top.mail.ru/jump?from=269943"'+
' target=_top><img src="http://top.list.ru/counter'+
'?id=269943;t=180;js='+js+a+';rand='+Math.random()+
'" alt="Рейтинг@Mail.ru"'+' border=0 height=15 width=88></a>')
if(js>11)d.write('<'+'!-- ')//--></script><noscript><A HREF="http://top.mail.ru/jump?from=269943"><IMG SRC="http://top.list.ru/counter?js=na;id=269943;t=180" BORDER=0 WIDTH=88 HEIGHT=15 ALT="Рейтинг@Mail.ru"></A></noscript><script language="JavaScript"><!--
if(js>11)d.write('--'+'>')//--></script><!--/COUNTER-->
<!-- HotLog -->
<script language="javascript">
hotlog_js="1.0";hotlog_d=document; hotlog_n=navigator;hotlog_rn=Math.random();
hotlog_n_n=(hotlog_n.appName.substring(0,3)=="Mic")?0:1;
hotlog_r=""+hotlog_rn+"&s=25682&im=26&r="+escape(hotlog_d.referrer)+"&pg="+
escape(window.location.href);
hotlog_d.cookie="hotlog=1"; hotlog_r+="&c="+(hotlog_d.cookie?"Y":"N");
hotlog_d.cookie="hotlog=1; expires=Thu, 01-Jan-70 00:00:01 GMT"</script>
<script language="javascript1.1">
hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")</script>
<script language="javascript1.2">
hotlog_js="1.2";hotlog_s=screen;
hotlog_r+="&wh="+hotlog_s.width+'x'+hotlog_s.height+"&px="+((hotlog_n_n==0)?
hotlog_s.colorDepth:hotlog_s.pixelDepth)</script>
<script language="javascript1.3">hotlog_js="1.3"</script>
<script language="javascript">hotlog_r+="&js="+hotlog_js;
hotlog_d.write("<a href=http://click.hotlog.ru/?25682 target=_top><img "+
"src=\"http://hit2.hotlog.ru/cgi-bin/hotlog/count?"+
hotlog_r+"&\" border=0 width=88 height=31 alt=HotLog></a>")</script>
<noscript><a href=http://click.hotlog.ru/?25682 target=_top><img
src="http://hit2.hotlog.ru/cgi-bin/hotlog/count?s=25682&im=26" border=0 
width="88" height="31" alt="HotLog"></a></noscript>
<!-- /HotLog -->
</BODY>
</HTML>
